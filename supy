#!/usr/bin/env python
import os,sys,inspect,utils
############################################
def opts() :
    from optparse import OptionParser
    parser = OptionParser("usage: %prog analysis-file [options]")
    parser.add_option("--loop",    dest = "loop",    default = None,  metavar = "N",          help = "loop over events using N cores (N>0)")
    parser.add_option("--slices",  dest = "slices",  default = None,  metavar = "S",          help = "split each sample into S slices (S>0)")
    parser.add_option("--profile", dest = "profile", default = False, action  = "store_true", help = "profile the code")
    parser.add_option("--batch",   dest = "batch",   default = False, action  = "store_true", help = "submit to batch queue")
    parser.add_option("--jobid",   dest = "jobId",   default = None,  metavar = "id",         help = "[for internal use only]")
    options,args = parser.parse_args()

    if len(args)!=1 :
        parser.print_help()
        exit()
    return options,args[0]
############################################
def globalSetup(listOfSourceFiles=[]) :
    import sys
    sys.argv.append("-b")
    
    import ROOT as r
    for sourceFile in listOfSourceFiles :
        r.gROOT.LoadMacro(sourceFile+"+")
    r.gROOT.SetStyle("Plain")
    r.gStyle.SetPalette(1)
    #r.TH1.SetDefaultSumw2(True)#comment until ROOT 5.24, which has a needed bug-fix
    r.gErrorIgnoreLevel=2000
    r.gROOT.SetBatch(True)

    sys.argv.pop()
############################################
def importedClass() :
    import analysis
    count = 0
    theClass = None
    for itemName in dir(eval(module)) :
        item=eval(module+"."+itemName)
        if not inspect.isclass(item) : continue        
        if issubclass(item, analysis.analysis) :
            count+=1
            theClass = item
    assert count==1,arg+" needs exactly 1 class which inherits from analysis; it has "+str(count)
    return theClass
############################################
def submitBatchJob(jobCmd,iJob,indexDict,scriptDir) :
    os.system("mkdir -p "+scriptDir)
    hostname=os.environ["HOSTNAME"]

    subScript = None
    jobScript = None
    if hostname=="lx05.hep.ph.ic.ac.uk" or hostname=="lx06.hep.ph.ic.ac.uk" :
        subScript="icSub.sh"
        jobScript="icJob.sh"
    assert subScript and jobScript,"hostname"+str(hostname)+"not recognized"
    os.system("chmod +x "+subScript)

    jobScriptFileName  = scriptDir+"/job"+str(iJob)+"__"
    for key in ["iConfig","iSample","iSlice"] :
        jobScriptFileName +="_%s"%str(indexDict[key])
    jobScriptFileName +=".sh"

    os.system("cp -p "+jobScript+" "+jobScriptFileName)
    outJobScript = open(jobScriptFileName,"a")
    outJobScript.write("cd "+os.environ["PWD"]+"\n")
    outJobScript.write(jobCmd)
    outJobScript.close()

    subCmd = "./"+subScript+" "+jobScriptFileName
    #print subCmd
    os.system(subCmd)
############################################

#get options and check them
options,arg = opts()
assert (options.jobId==None or options.batch==False), "options jobid and batch cannot be used simultaneously"
if options.batch :
    assert (options.loop!=None and options.slices!=None), "when using --batch, use also --loop and --slices"

#set up ROOT and compile cpp source files
globalSetup(listOfSourceFiles=["pragmas.h","helpers.C"])

#construct the analysis
sys.path.extend([os.environ["PWD"],os.environ["PWD"]+"/analyses"])
while "//" in arg : arg = arg.replace("//","/")
module = arg.replace("analyses/","").replace(".py","")
exec("import "+module)
someClass = importedClass()
someInstance = someClass(options)

if options.batch : #make one script per job and submit them to the queue
    argsAndOptions = sys.argv[1:]
    argsAndOptions.remove("--batch")
    baseCmd = "./supy "+" ".join(argsAndOptions)
    for iJob,listOfIndices in enumerate( someInstance.jobs() ) :
        submitBatchJob(baseCmd+" --jobid "+str(iJob), iJob, listOfIndices, scriptDir = someInstance.namedOutputDirectory())
    print
    print "You may do this to monitor your jobs (exit with CTRL-C):"
    print "watch 'qstat | head -40; find %s/%s | grep -c root'"%(someInstance.baseOutputDirectory(),someInstance.name)
elif options.loop!=None : #loop over the events
    someInstance.loop()

#merge output and conclude
if options.jobId==None and not options.batch :
    someInstance.mergeOutput()
    try:
        someInstance.conclude()
    except AssertionError as foo:
        print
        print foo
        #print "Have you looped?"
