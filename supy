#!/usr/bin/env python
import os,sys,inspect
############################################
def opts() :
    from optparse import OptionParser
    parser = OptionParser("usage: %prog analysis-file [options]")
    parser.add_option("--loop",          dest = "loop",           default = 0,     metavar = "N",         help = "loop over events using N cores")
    parser.add_option("--profile",       dest = "profile",        default = False, action = "store_true", help = "profile the code")
    parser.add_option("--onlymerge",     dest = "onlymerge",      default = False, action = "store_true", help = "skip the loop and simply merge the output files")
    parser.add_option("--batch",         dest = "batch",          default = False, action = "store_true", help = "split analysis and submit to batch queue")
    parser.add_option("--singlesampleid",dest = "singlesampleid", default = None,  metavar = "id",        help = "[for internal use only]")
    parser.add_option("--singleconfigid",dest = "singleconfigid", default = None,  metavar = "id",        help = "[for internal use only]")
    options,args = parser.parse_args()

    if len(args)!=1 :
        parser.print_help()
        exit()
    return options,args[0]
############################################
def globalSetup(listOfSourceFiles=[]) :
    import sys
    sys.argv.append("-b")
    
    import ROOT as r
    for sourceFile in listOfSourceFiles :
        r.gROOT.LoadMacro(sourceFile+"+")
    r.gROOT.SetStyle("Plain")
    r.gStyle.SetPalette(1)
    #r.TH1.SetDefaultSumw2(True)#comment until ROOT 5.24, which has a needed bug-fix
    r.gErrorIgnoreLevel=2000
    r.gROOT.SetBatch(True)

    sys.argv.pop()
############################################
def importedClass() :
    import analysis
    count = 0
    theClass = None
    for itemName in dir(eval(module)) :
        item=eval(module+"."+itemName)
        if not inspect.isclass(item) : continue        
        if issubclass(item, analysis.analysis) :
            count+=1
            theClass = item
    assert count==1,arg+" needs exactly 1 class which inherits from analysis; it has "+str(count)
    return theClass
############################################
def submitBatchJob(jobCmd,iLooper,iConfig) :
    dirName = os.environ["PWD"]+"/batch_jobs"
    os.system("mkdir -p "+dirName)
    hostname=os.environ["HOSTNAME"]

    subScript = None
    jobScript = None
    if hostname=="lx05.hep.ph.ic.ac.uk" or hostname=="lx06.hep.ph.ic.ac.uk" :
        subScript="icSub.sh"
        jobScript="icJob.sh"
    assert subScript and jobScript,"hostname"+str(hostname)+"not recognized"
    os.system("chmod +x "+subScript)

    jobScriptFileName = dirName+"/job_%d_%d.sh"%(iLooper,iConfig)
    jobOutFileName = "$USERTMP/job_%d_%d.out"%(iLooper,iConfig)
    os.system("cp -p "+jobScript+" "+jobScriptFileName)
    outJobScript = open(jobScriptFileName,"a")
    outJobScript.write("cd "+os.environ["PWD"]+"\n")
    outJobScript.write(jobCmd+" >& "+jobOutFileName)
    outJobScript.close()

    subCmd = "./"+subScript+" "+jobScriptFileName
    os.system(subCmd)
############################################
options,arg = opts()
module = arg.replace("analyses/","").replace(".py","")
globalSetup(listOfSourceFiles=["pragmas.h","helpers.C"])

sys.path.extend([os.environ["PWD"],os.environ["PWD"]+"/analyses"])
exec("import "+module)
someClass = importedClass()

if options.singleconfigid!=None :
    someInstance = someClass(configurationId = int(options.singleconfigid))
else :
    someInstance = someClass()
    
#loop over events
if options.singlesampleid!=None :
    #restrict to the sample with the specified index
    someInstance.listOfLoopers = [ someInstance.listOfLoopers[int(options.singlesampleid)] ]

if options.batch :
    args = sys.argv[1:]
    args.remove("--batch")
    baseCmd="./supy "+" ".join(args)
    for iLooper in range(len(someInstance.listOfLoopers)) :
        for iConfig in range(len(someInstance.configurations())) :
            cmd = baseCmd + " --singlesampleid "+str(iLooper) + " --singleconfigid "+str(iConfig)
            submitBatchJob(cmd,iLooper,iConfig)
    print
    print "You may do this to monitor your jobs (exit with CTRL-C):"
    print "watch 'qstat; ls %s/config* | grep -c %s'"%(someInstance.baseOutputDirectory(),someInstance.name)
else :
    if options.loop :
        someInstance.loop(int(options.loop), bool(options.profile), bool(options.onlymerge))
    if not options.singlesampleid :
        try:
            someInstance.conclude()
        except AssertionError as foo:
            print foo
            print "Have you looped?"

