#!/usr/bin/env python
import os,sys,inspect,utils,configuration
############################################
def opts() :
    from optparse import OptionParser
    parser = OptionParser("usage: %prog analysis-file [options]")
    parser.add_option("--loop",    dest = "loop",    default = None,  metavar = "N",          help = "loop over events using N cores (N>0)")
    parser.add_option("--slices",  dest = "slices",  default = None,  metavar = "S",          help = "split each sample into S slices (S>0)")
    parser.add_option("--profile", dest = "profile", default = False, action  = "store_true", help = "profile the code")
    parser.add_option("--batch",   dest = "batch",   default = False, action  = "store_true", help = "submit to batch queue")
    parser.add_option("--jobid",   dest = "jobId",   default = None,  metavar = "id",         help = "[for internal use only]")
    parser.add_option("--site",    dest = "site",    default = None,  metavar = "prefix",     help = "[for internal use only]")
    options,args = parser.parse_args()

    if len(args)!=1 :
        parser.print_help()
        exit()

    assert (options.jobId==None or options.batch==False), "options jobid and batch cannot be used simultaneously"
    if options.batch :
        assert (options.loop!=None and options.slices!=None), "when using --batch, use also --loop and --slices"
    return options,args[0]
############################################
def setupROOT() :
    import sys
    sys.argv.append("-b")
    
    import ROOT as r
    r.gROOT.SetStyle("Plain")
    r.gStyle.SetPalette(1)
    #r.TH1.SetDefaultSumw2(True)#comment until ROOT 5.24, which has a needed bug-fix
    r.gErrorIgnoreLevel = 2000
    r.gROOT.SetBatch(True)

    sys.argv.pop()
############################################
def moduleName(arg) :
    sys.path.extend([os.environ["PWD"], os.environ["PWD"]+"/analyses"])
    while "//" in arg : arg = arg.replace("//","/")
    module = arg.replace("analyses/","").replace(".py","")
    return module
############################################
def importedClass(module) :
    exec("import "+module)
    import analysis
    count = 0
    theClass = None
    for itemName in dir(eval(module)) :
        item=eval(module+"."+itemName)
        if not inspect.isclass(item) : continue        
        if issubclass(item, analysis.analysis) :
            count+=1
            theClass = item
    assert count==1,arg+" needs exactly 1 class which inherits from analysis; it has "+str(count)
    return theClass
############################################
def submitBatchJob(jobCmd, iJob, indexDict, scriptDir, subScript, jobScript, condorTemplate) :
    jobScriptFileName  = scriptDir+"/job"+str(iJob)+"__"
    for key in ["iConfig","iSample","iSlice"] :
        jobScriptFileName +="_%s"%str(indexDict[key])
    jobScriptFileName +=".sh"

    os.system("cp -p "+jobScript+" "+jobScriptFileName)
    outJobScript = open(jobScriptFileName,"a")
    outJobScript.write("\ncd "+os.environ["PWD"]+"\n")
    outJobScript.write(jobCmd)
    outJobScript.close()

    if os.path.exists(condorTemplate) :
        condorFileName = jobScriptFileName.replace(".sh",".condor")
        os.system("cat %s | sed s@JOBFLAG@%s@g > %s"%(condorTemplate, jobScriptFileName, condorFileName))
        arg = condorFileName
    else :
        arg = jobScriptFileName

    subCmd = "./%s %s"%(subScript, arg)
    os.system(subCmd)
############################################
def doBatch(someInstance) :
    argsAndOptions = sys.argv[1:]
    argsAndOptions.remove("--batch")
    baseCmd = "./supy "+" ".join(argsAndOptions)

    scriptDir = someInstance.globalStem
    os.system("mkdir -p "+scriptDir)

    subScript,jobScript,condorTemplate = configuration.batchScripts()
    os.system("chmod +x "+subScript)

    site = configuration.sitePrefix()
    for iJob,listOfIndices in enumerate( someInstance.jobs() ) :
        submitBatchJob("%s --jobid %d --site %s"%(baseCmd, iJob, site),
                       iJob, listOfIndices, scriptDir = scriptDir, subScript = subScript, jobScript = jobScript, condorTemplate = condorTemplate)
############################################
def finish(someInstance) :
    someInstance.mergeOutput()
    try:
        someInstance.conclude()
    except AssertionError as foo:
        print
        print foo
        #print "Have you looped?"
############################################
        
#get options
options,arg = opts()

#set up ROOT
setupROOT()

#compile cpp source files
utils.compileSources(listOfSourceFiles = configuration.sourceFiles())

#construct the analysis
someClass = importedClass(moduleName(arg))
someInstance = someClass(options)

if options.batch : #make one script per job and submit them to the queue
    doBatch(someInstance)
elif options.loop!=None : #loop over the events
    someInstance.loop()

#merge output and conclude
if options.jobId==None and not options.batch :
    finish(someInstance)
